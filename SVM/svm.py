# -*- coding: utf-8 -*-
"""SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QkU2qnuP5wJMNYO9ZeFShIz5erog6aor

# Support Vector Machines with Python
"""

# Commented out IPython magic to ensure Python compatibility.
# Import Libraries

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

# Get the data

from sklearn.datasets import load_breast_cancer

cancer_dictionary = load_breast_cancer()

# Here we get the titles of the informations we have in this dict

cancer_dictionary.keys()

# DESCR is the description of the data set

print(cancer_dictionary['DESCR'])

# feature_names are the informations about the cancer

print(cancer_dictionary['feature_names'])



"""# Get the DATAFRAME from the DICT"""

df_cancer_data = pd.DataFrame(data = cancer_dictionary['data'], columns = cancer_dictionary['feature_names'])

# Get info about the DF
df_cancer_data.info()

# Get head (Top 5)

df_cancer_data.head()



# Get Cancer Target

df_cancer_target = pd.DataFrame(cancer_dictionary['target'], columns=['HasCancer'])

df_cancer_target.head()

# Split the dataset into train and test

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(df_cancer_data, df_cancer_target, test_size=0.30, random_state=101)

# Load SVC

from sklearn.svm import SVC
model = SVC()

# Train

svc_fit = model.fit(X_train,y_train)

# Predict

predictions = model.predict(X_test)

# Check how good it is

from sklearn.metrics import classification_report,confusion_matrix

print(confusion_matrix(y_test,predictions))

print(classification_report(y_test,predictions))

# And now? :'(



# Grid Search

from sklearn.model_selection import GridSearchCV

param_grid = {'C': [1, 10, 100], 'gamma': [0.1,0.01,0.001,0.0001], 'kernel': ['rbf']}

grid = GridSearchCV(SVC(),param_grid,refit=True,verbose=3)

grid.fit(X_train,y_train)

grid.best_params_

grid.best_estimator_

grid_predictions = grid.predict(X_test)

print(confusion_matrix(y_test,grid_predictions))

print(classification_report(y_test,grid_predictions))









# Commented out IPython magic to ensure Python compatibility.
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
# Setosa is the most separable. 
iris = sns.load_dataset('iris')
sns.set_style("darkgrid")
sns.pairplot(iris,hue='species',palette='Dark2')





